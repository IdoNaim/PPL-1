#lang racket/base

; Signature: last-item(lst)
; Type: [ List(T) -> T ]
; Purpose: returns the last element of a list
; Pre-condition: lst isn't empty
; Tests: (last-item '(1 2 3)) -> 3
(define last-item
    (lambda (lst)
     (if(eq? (cdr lst) '())
        (car lst)
        (last-item (cdr lst)))))

; Signature: remove-last-item(lst)
; Type: [ List(T) -> List(T) ]
; Purpose: returns the list without the last element
; Pre-condition: lst isn't empty
; Tests: (last-item '(1 2 3)) -> '(1,2)
(define remove-last-item
    (lambda (lst)
     (if(eq? (cdr lst) '())
        '()
        (cons (car lst) (remove-last-item(cdr lst))))))

; Signature: rotate-nth(lst, n)
; Type: [ List(T) * Number -> List(T) ]
; Purpose: Rotates the given list n times to the right
; Pre-condition: n is a non-negative integer
; Tests: (rotate-nth '(1 2 3) 1) -> '(3 1 2)
(define rotate-nth
  (lambda (lst n)
    (if (eq? n 0)
        lst
        (rotate-nth (rotate-once lst) (- n 1)))))

; Signature: rotate-once(lst)
; Type: [ List(T) -> List(T) ]
; Purpose: Rotates the given list once to the right
; Pre-condition: true
; Tests: (rotate-once '(1 2 3)) -> '(3 1 2)
(define rotate-once
  (lambda (lst)
    (if(eq? lst '())
        '()
        (if (eq? (cdr lst) '())
            lst
            (cons (last-item lst) (remove-last-item lst))))))